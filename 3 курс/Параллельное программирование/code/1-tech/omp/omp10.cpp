/* ------------------------------------------------------------------------- */
/*  Данный файл является частью комплекта исходных текстов,                  */
/*  иллюстрирующих материал следующего издания:                              */
/*  Федотов И.Е.                                                             */
/*  Модели параллельного программирования. - М.: СОЛОН-ПРЕСС, 2012. - 384 с. */
/*  ISBN 978-5-91359-102-9                                                   */
/*                                                                           */
/*  Как и само издание, прилагаемые к нему исходные тексты предназначены     */
/*  лишь для ознакомления с принципами высокоуровневого построения           */
/*  параллельных программ, а также для проведения дальнейших экспериментов.  */
/*  Использование этого кода в качестве основы для реальных программ         */
/*  допустимо, однако требует доработок и может осуществляться лишь          */
/*  на личный страх и риск разработчика.                                     */
/*  Исходные тексты предоставляются "как есть", без каких бы то ни было      */
/*  явных или неявных гарантий пригодности к практическому применению.       */
/*                                                                           */
/*  Copyright © 2008-2011 Федотов И.Е.                                       */
/* ------------------------------------------------------------------------- */


#ifdef _OPENMP
#include <omp.h>
#endif //_OPENMP

#include <set>
#include "../../common/synprintf.hxx"
using namespace z;

using namespace std;

int calc1(int)
{
    // ...
    return 0;
}

int calc2(int)
{
    // ...
    return 0;
}

int calc3(int)
{
    // ...
    return 0;
}

int main(int argc, char *argv[])
{
    int n = 100;

    set<int> a, b;
    #pragma omp parallel for
    for (int i = 0; i < n; ++i)
    {
        int item1 = calc1(i);
        #pragma omp critical (seta)
        a.insert(item1);

        int item2 = calc2(i);
        #pragma omp critical (setb)
        b.insert(item2);

        int item3 = calc3(i);
        #pragma omp critical (setb)
        b.insert(item3);
    }
    return 0;
}
